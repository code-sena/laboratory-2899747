@startuml
top to bottom direction
skinparam linetype ortho

class SupportTicket {
  +id: int
  +customer_id: int
  +subject: string
  +description: string
  +status: string
  +created_at: datetime

  +create()
  +read()
  +update()
  +delete()
}

class Customer {
  +id: int
  +name: string
  +email: string
}

SupportTicket "1" -- "1" Customer : belongs to
    class Review {
    - id: int
    - productId: int
    - customerId: int
    - rating: int
    - comment: string
    - createdAt: datetime
    - feedbackId: int

    + createReview(productId: int, customerId: int, rating: int, comment: string): bool
    + validateFields(): bool
    + registerInDatabase(): bool
    + integrateWithFeedback(feedbackId: int): bool

    + getReviewById(id: int): Review
    + getReviewsByProduct(productId: int): List<Review>
    + updateReview(id: int, rating: int, comment: string): bool
    + deleteReview(id: int): bool
    + listAllReviews(): List<Review>
    }

 package "HU-6: Product" {
    class Product {
  - id : Integer
  - name : String
  - description : String
  - price : double
  - stock : int
  - active : boolean
  - categoryId : int
  
  + Product()
  + Product(id:Integer, name:String, description:String, price:double, stock:int, active:boolean, categoryId:int)
  + getId() : Integer
  + setId(id:Integer) : void
  + getName() : String
  + setName(name:String) : void
  + getDescription() : String
  + setDescription(description:String) : void
  + getPrice() : double
  + setPrice(price:double) : void
  + getStock() : int
  + setStock(stock:int) : void
  + isActive() : boolean
  + setActive(active:boolean) : void
  + getCategoryId() : int
  + setCategoryId(categoryId:int) : void
}

interface IProduct {
}

interface JpaRepository<Product, Integer> {
  + save(entity:Product) : Product
  + findById(id:Integer) : Optional<Product>
  + findAll() : List<Product>
  + deleteById(id:Integer) : void
}
class ProductDTO {

  - id : Integer
  - name : String
  - description : String
  - price : double
  - stock : int
  - active : boolean
  - categoryId : int

  + Product()
  + Product(id:Integer, name:String, description:String, price:double, stock:int, active:boolean, categoryId:int)
  + getId() : Integer
  + setId(id:Integer) : void
  + getName() : String
  + setName(name:String) : void
  + getDescription() : String
  + setDescription(description:String) : void
  + getPrice() : double
  + setPrice(price:double) : void
  + getStock() : int
  + setStock(stock:int) : void
  + isActive() : boolean
  + setActive(active:boolean) : void
  + getCategoryId() : int
  + setCategoryId(categoryId:int) : void
  
}

class ProductService {
  - IProduct : repository

  + createProduct(product:Product) : Product
  + getProductById(id:Integer) : Product
  + getAllProducts() : List<Product>
  + updateProduct(product:Product) : Product
  + deleteProduct(id:Integer) : void

}

  class ProductController {
    - service : ProductService
    + create(productDTO:ProductDTO) : ProductDTO
    + getById(id:Integer) : ProductDTO
    + getAll() : List<ProductDTO>
    + update(productDTO:ProductDTO) : ProductDTO
    + delete(id:Integer) : void
  }


  ' Relaciones
  IProduct ..|> JpaRepository
  ProductService --> IProduct
  ProductService --> ProductDTO
  ProductService --> Product
  ProductController --> ProductService
  ProductController --> ProductDTO

  

}
package "HU-12: Payment" {
  interface IPayment << interface >>
  class Order {
    + Order(): 
    - orderId: Long
  }
  class Payment {
    + Payment(): 
    + Payment(Integer, Order, PaymentMethod, BigDecimal, BigDecimal, StatusPaymentTypes): 
    - order: Order
    - paymentMethod: PaymentMethod
    - status: StatusPaymentTypes
    - id: Integer
    - paymentDate: BigDecimal
    - amount: BigDecimal
    + getId(): Integer
    + getOrder(): Order
    + setPaymentDate(BigDecimal): void
    + setStatus(StatusPaymentTypes): void
    + getPaymentMethod(): PaymentMethod
    # canEqual(Object): boolean
    + toString(): String
    + getAmount(): BigDecimal
    + setPaymentMethod(PaymentMethod): void
    + getPaymentDate(): BigDecimal
    + equals(Object): boolean
    + getStatus(): StatusPaymentTypes
    + setId(Integer): void
    + hashCode(): int
    + setAmount(BigDecimal): void
    + setOrder(Order): void
    + builder(): PaymentBuilder
  }
  class PaymentBuilder {
    ~ PaymentBuilder(): 
    - order: Order
    - amount: BigDecimal
    - status: StatusPaymentTypes
    - paymentMethod: PaymentMethod
    - id: Integer
    - paymentDate: BigDecimal
    + id(Integer): PaymentBuilder
    + order(Order): PaymentBuilder
    + paymentMethod(PaymentMethod): PaymentBuilder
    + amount(BigDecimal): PaymentBuilder
    + paymentDate(BigDecimal): PaymentBuilder
    + status(StatusPaymentTypes): PaymentBuilder
    + build(): Payment
    + toString(): String
  }
  class PaymentMethod {
    + PaymentMethod(): 
    - id: Long
  }
  enum StatusPaymentTypes << enumeration >> {
    + StatusPaymentTypes(): 
    + COMPLETED: 
    + CANCELED: 
    + PENDING: 
    + values(): StatusPaymentTypes[]
    + valueOf(String): StatusPaymentTypes
  }

  IPayment                 -[#595959,dashed]->  Payment                 
  Payment                 "1" *-[#595959,plain]-> "order\n1" Order                   
  Payment                 "1" *-[#595959,plain]-> "paymentMethod\n1" PaymentMethod           
  Payment                 "1" *-[#595959,plain]-> "status\n1" StatusPaymentTypes      
  PaymentBuilder           +-[#820000,plain]-  Payment                 

}
@enduml