@startuml

class SupportTicket {
  +id: int
  +customer_id: int
  +subject: string
  +description: string
  +status: string
  +created_at: datetime

  +create()
  +read()
  +update()
  +delete()
}

class Customer {
  +id: int
  +name: string
  +email: string
}

SupportTicket "1" -- "1" Customer : belongs to
class Review {
  - id: int
  - productId: int
  - customerId: int
  - rating: int
  - comment: string
  - createdAt: datetime
  - feedbackId: int

  + createReview(productId: int, customerId: int, rating: int, comment: string): bool
  + validateFields(): bool
  + registerInDatabase(): bool
  + integrateWithFeedback(feedbackId: int): bool

  + getReviewById(id: int): Review
  + getReviewsByProduct(productId: int): List<Review>
  + updateReview(id: int, rating: int, comment: string): bool
  + deleteReview(id: int): bool
  + listAllReviews(): List<Review>
}

package "HU-6: Product" {
  class Product {
    - id : Integer
    - name : String
    - description : String
    - price : double
    - stock : int
    - active : boolean
    - categoryId : int

    + Product()
    + Product(id:Integer, name:String, description:String, price:double, stock:int, active:boolean, categoryId:int)
    + getId() : Integer
    + setId(id:Integer) : void
    + getName() : String
    + setName(name:String) : void
    + getDescription() : String
    + setDescription(description:String) : void
    + getPrice() : double
    + setPrice(price:double) : void
    + getStock() : int
    + setStock(stock:int) : void
    + isActive() : boolean
    + setActive(active:boolean) : void
    + getCategoryId() : int
    + setCategoryId(categoryId:int) : void
  }

  interface IProduct {
  }

  interface JpaRepository<Product, Integer> {
    + save(entity:Product) : Product
    + findById(id:Integer) : Optional<Product>
    + findAll() : List<Product>
    + deleteById(id:Integer) : void
  }
  class ProductDTO {

    - id : Integer
    - name : String
    - description : String
    - price : double
    - stock : int
    - active : boolean
    - categoryId : int

    + Product()
    + Product(id:Integer, name:String, description:String, price:double, stock:int, active:boolean, categoryId:int)
    + getId() : Integer
    + setId(id:Integer) : void
    + getName() : String
    + setName(name:String) : void
    + getDescription() : String
    + setDescription(description:String) : void
    + getPrice() : double
    + setPrice(price:double) : void
    + getStock() : int
    + setStock(stock:int) : void
    + isActive() : boolean
    + setActive(active:boolean) : void
    + getCategoryId() : int
    + setCategoryId(categoryId:int) : void

  }

  class ProductService {
    - IProduct : repository

    + createProduct(product:Product) : Product
    + getProductById(id:Integer) : Product
    + getAllProducts() : List<Product>
    + updateProduct(product:Product) : Product
    + deleteProduct(id:Integer) : void

  }

  class ProductController {
    - service : ProductService
    + create(productDTO:ProductDTO) : ProductDTO
    + getById(id:Integer) : ProductDTO
    + getAll() : List<ProductDTO>
    + update(productDTO:ProductDTO) : ProductDTO
    + delete(id:Integer) : void
  }


  ' Relaciones
  IProduct ..|> JpaRepository
  ProductService --> IProduct
  ProductService --> ProductDTO
  ProductService --> Product
  ProductController --> ProductService
  ProductController --> ProductDTO

}

class Return {
  +id: int
  +order_id: int
  +product_id: int
  +return_date: datetime
  +reason: string
  +status: string
}

class Order {
  +id: int
  // otros atributos...
}

Return --> Order : order_id
Return --> Product

@enduml